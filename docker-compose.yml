services:
  ml:
    build:
      context: .
      dockerfile: Dockerfile-python
    container_name: ml-service
    ports:
      - "8000:8000"
    volumes:
      - ./ml_service:/app
    restart: on-failure
    network_mode: host
    deploy:
      resources:
        limits:
          memory: 48g

  web:
    build:
      context: .
      dockerfile: Dockerfile-php
    environment:
      - DOMAIN=${DOMAIN}
    image: php:8.2-apache
    container_name: php-app
    network_mode: host
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - db
      - composer
    volumes:
      - .:/var/www/html

  db:
    image: mysql:8.1.0
    container_name: database
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    network_mode: host
    volumes:
      - ./mysql_data:/var/lib/mysql
      - ./migrations:/docker-entrypoint-initdb.d
      - ./my.cnf:/etc/mysql/my.cnf
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '1.0'
        reservations:
          memory: 512m
    restart: on-failure

  composer:
    image: composer:latest
    container_name: composer-installer
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
    command: [ "composer", "update" ]
###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
