services:
  ml:
    build:
      context: .
      dockerfile: Dockerfile-python
    container_name: ml-service
    ports:
      - "8000:8000"
    volumes:
      - ./ml_service:/app
    restart: on-failure
    deploy:
      resources:
        limits:
          memory: 2g

  web:
    build:
      context: .
      dockerfile: Dockerfile-php
    environment:
      - DOMAIN=${DOMAIN}
      - DB_HOST=${DB_HOST}
      - MYSQL_PORT=${MYSQL_PORT}
      - MYSQL_WEB_USER=${MYSQL_WEB_USER}
      - MYSQL_WEB_PASSWORD=${MYSQL_WEB_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - DATABASE_URL=${DATABASE_URL}
      - WIKTIONARY_UA_EMAIL=${WIKTIONARY_UA_EMAIL}
      - RATE_LIMITER_WHITELISTED_IP=${RATE_LIMITER_WHITELISTED_IP}
    image: php:8.2-apache
    container_name: php-app
    network_mode: host
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - db
      - composer
    volumes:
      - .:/var/www/html

  db:
    image: mysql:8.1.0
    container_name: database
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    network_mode: host
    volumes:
      - ./mysql_data:/var/lib/mysql
      - ./migrations:/docker-entrypoint-initdb.d
      - ./my.cnf:/etc/mysql/my.cnf
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '1.0'
        reservations:
          memory: 512m
    restart: on-failure

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - bootstrap.memory_lock=true
    network_mode: host
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: on-failure
    deploy:
      resources:
        limits:
          memory: 3g
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://localhost:9200
      - SERVER_HOST=0.0.0.0
    network_mode: host
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: on-failure
    deploy:
      resources:
        limits:
          memory: 1g

  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    network_mode: host
    volumes:
      - ./redis_data:/data
    restart: on-failure

  composer:
    image: composer:latest
    container_name: composer-installer
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
    command: [ "composer", "update" ]

  ###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
  database_data:
  elasticsearch_data: